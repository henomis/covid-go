package chartjs

type Chartjs struct {
	Config Config
}

type Config struct {
	Type    *string  `json:"type,omitempty"`
	Data    Data     `json:"data,omitempty"`
	Options *Options `json:"options,omitempty"`
	Plugins *Plugins `json:"plugins,omitempty"`
}

type Data struct {
	Labels   []string  `json:"labels,omitempty"`
	Datasets []Dataset `json:"datasets,omitempty"`
}

type Dataset struct {
	Type            *string  `json:"type,omitempty"`
	Label           *string  `json:"label,omitempty"`
	BackgroundColor *string  `json:"backgroundColor,omitempty"`
	BorderColor     *string  `json:"borderColor,omitempty"`
	BorderWidth     *float64 `json:"borderWidth,omitempty"`
	Fill            *bool    `json:"fill,omitempty"`

	SteppedLine            *bool    `json:"steppedLine,omitempty"`
	LineTension            *float64 `json:"lineTension,omitempty"`
	CubicInterpolationMode *string  `json:"cubicInterpolationMode,omitempty"`
	PointBackgroundColor   *string  `json:"pointBackgroundColor,omitempty"`
	PointBorderColor       *string  `json:"pointBorderColor,omitempty"`
	PointBorderWidth       *float64 `json:"pointBorderWidth,omitempty"`
	PointRadius            *float64 `json:"pointRadius,omitempty"`
	PointHitRadius         *float64 `json:"pointHitRadius,omitempty"`
	PointHoverRadius       *float64 `json:"pointHoverRadius,omitempty"`
	PointHoverBorderColor  *string  `json:"pointHoverBorderColor,omitempty"`
	PointHoverBorderWidth  *float64 `json:"pointHoverBorderWidth,omitempty"`
	PointStyle             *int     `json:"pointStyle,omitempty"`
	ShowLine               *bool    `json:"showLine,omitempty"`
	Order                  *int64   `json:"order,omitempty"`

	// Axis ID that matches the ID on the Axis where this dataset is to be drawn.
	XAxisID *string `json:"xAxisID,omitempty"`
	YAxisID *string `json:"yAxisID,omitempty"`

	// set the formatter for the data, e.g. "%.2f"
	// these are not exported in the json, just used to determine the decimals of precision to show
	XFloatFormat string `json:"-"`
	YFloatFormat string `json:"-"`

	Data interface{} `json:"data,omitempty"`
}

type Options struct{}

type Plugins struct {
	Legend *PluginLegend `json:"legend,omitempty"`
	Title  *PluginTitle  `json:"title,omitempty"`
}

//***********************************+
// type AutoGenerated struct {
// 	Type    string  `json:"type"`
// 	Data    Data    `json:"data"`
// 	Options Options `json:"options"`
// }
// type Datasets struct {
// 	Label                     string  `json:"label"`
// 	LineTension               float64 `json:"lineTension"`
// 	BackgroundColor           string  `json:"backgroundColor"`
// 	BorderColor               string  `json:"borderColor"`
// 	PointRadius               int     `json:"pointRadius"`
// 	PointBackgroundColor      string  `json:"pointBackgroundColor"`
// 	PointBorderColor          string  `json:"pointBorderColor"`
// 	PointHoverRadius          int     `json:"pointHoverRadius"`
// 	PointHoverBackgroundColor string  `json:"pointHoverBackgroundColor"`
// 	PointHoverBorderColor     string  `json:"pointHoverBorderColor"`
// 	PointHitRadius            int     `json:"pointHitRadius"`
// 	PointBorderWidth          int     `json:"pointBorderWidth"`
// 	Data                      []int   `json:"data"`
// }
// type Data struct {
// 	Labels   []string   `json:"labels"`
// 	Datasets []Datasets `json:"datasets"`
// }
// type Padding struct {
// 	Left   int `json:"left"`
// 	Right  int `json:"right"`
// 	Top    int `json:"top"`
// 	Bottom int `json:"bottom"`
// }
// type Layout struct {
// 	Padding Padding `json:"padding"`
// }
// type Time struct {
// 	Unit string `json:"unit"`
// }
// type GridLines struct {
// 	Display    bool `json:"display"`
// 	DrawBorder bool `json:"drawBorder"`
// }
// type Ticks struct {
// 	MaxTicksLimit int `json:"maxTicksLimit"`
// }
// type XAxes struct {
// 	Time      Time      `json:"time"`
// 	GridLines GridLines `json:"gridLines"`
// 	Ticks     Ticks     `json:"ticks"`
// }
// type Ticks struct {
// 	MaxTicksLimit int `json:"maxTicksLimit"`
// 	Padding       int `json:"padding"`
// }
// type GridLines struct {
// 	Color              string `json:"color"`
// 	ZeroLineColor      string `json:"zeroLineColor"`
// 	DrawBorder         bool   `json:"drawBorder"`
// 	BorderDash         []int  `json:"borderDash"`
// 	ZeroLineBorderDash []int  `json:"zeroLineBorderDash"`
// }
// type YAxes struct {
// 	Ticks     Ticks     `json:"ticks"`
// 	GridLines GridLines `json:"gridLines"`
// }
// type Scales struct {
// 	XAxes []XAxes `json:"xAxes"`
// 	YAxes []YAxes `json:"yAxes"`
// }
// type Legend struct {
// 	Display bool `json:"display"`
// }
// type Callbacks struct {
// }
// type Tooltips struct {
// 	BackgroundColor   string    `json:"backgroundColor"`
// 	BodyFontColor     string    `json:"bodyFontColor"`
// 	TitleMarginBottom int       `json:"titleMarginBottom"`
// 	TitleFontColor    string    `json:"titleFontColor"`
// 	TitleFontSize     int       `json:"titleFontSize"`
// 	BorderColor       string    `json:"borderColor"`
// 	BorderWidth       int       `json:"borderWidth"`
// 	XPadding          int       `json:"xPadding"`
// 	YPadding          int       `json:"yPadding"`
// 	DisplayColors     bool      `json:"displayColors"`
// 	Intersect         bool      `json:"intersect"`
// 	Mode              string    `json:"mode"`
// 	CaretPadding      int       `json:"caretPadding"`
// 	Callbacks         Callbacks `json:"callbacks"`
// }
// type Options struct {
// 	MaintainAspectRatio bool     `json:"maintainAspectRatio"`
// 	Layout              Layout   `json:"layout"`
// 	Scales              Scales   `json:"scales"`
// 	Legend              Legend   `json:"legend"`
// 	Tooltips            Tooltips `json:"tooltips"`
// }

// type PluginLegend struct {
// 	Position string `json:"position,omitempty"`
// }

// type PluginTitle struct {
// 	Display *bool  `json:"display,omitempty"`
// 	Text    string `json:"text,omitempty"`
// }

// func True() *bool {
// 	t := true
// 	return &t
// }

// func False() *bool {
// 	t := false
// 	return &t
// }

// func Float(input float64) *float64 {
// 	t := input
// 	return &t
// }

// func Int(input int64) *int64 {
// 	t := input
// 	return &t
// }

// func String(input string) *string {
// 	t := input
// 	return &t
// }

// type LineOptions struct {
// 	Dataset interface{}
// 	Label   string
// 	Color   string
// }

// type ScatterOptions struct {
// 	Dataset interface{}
// 	Label   string
// 	Color   string
// }
/*

{
	"type": "line",
	"data": {
		"labels": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
		"datasets": [{
			"label": "Earnings",
			"lineTension": 0.3,
			"backgroundColor": "rgba(78, 115, 223, 0.05)",
			"borderColor": "rgba(78, 115, 223, 1)",
			"pointRadius": 3,
			"pointBackgroundColor": "rgba(78, 115, 223, 1)",
			"pointBorderColor": "rgba(78, 115, 223, 1)",
			"pointHoverRadius": 3,
			"pointHoverBackgroundColor": "rgba(78, 115, 223, 1)",
			"pointHoverBorderColor": "rgba(78, 115, 223, 1)",
			"pointHitRadius": 10,
			"pointBorderWidth": 2,
			"data": [0, 10000, 5000, 15000, 10000, 20000, 15000, 25000, 20000, 30000, 25000, 40000]
		}]
	},
	"options": {
		"maintainAspectRatio": false,
		"layout": {
			"padding": {
				"left": 10,
				"right": 25,
				"top": 25,
				"bottom": 0
			}
		},
		"scales": {
			"xAxes": [{
				"time": {
					"unit": "date"
				},
				"gridLines": {
					"display": false,
					"drawBorder": false
				},
				"ticks": {
					"maxTicksLimit": 7
				}
			}],
			"yAxes": [{
				"ticks": {
					"maxTicksLimit": 5,
					"padding": 10
				},
				"gridLines": {
					"color": "rgb(234, 236, 244)",
					"zeroLineColor": "rgb(234, 236, 244)",
					"drawBorder": false,
					"borderDash": [2],
					"zeroLineBorderDash": [2]
				}
			}]
		},
		"legend": {
			"display": false
		},
		"tooltips": {
			"backgroundColor": "rgb(255,255,255)",
			"bodyFontColor": "#858796",
			"titleMarginBottom": 10,
			"titleFontColor": "#6e707e",
			"titleFontSize": 14,
			"borderColor": "#dddfeb",
			"borderWidth": 1,
			"xPadding": 15,
			"yPadding": 15,
			"displayColors": false,
			"intersect": false,
			"mode": "index",
			"caretPadding": 10,
			"callbacks": {}
		}
	}
}

*/
